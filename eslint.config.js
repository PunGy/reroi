import globals from "globals"
import pluginJs from "@eslint/js"
import tseslint from "typescript-eslint"


/** @type {import('eslint').Linter.Config[]} */
export default [
  { files: ["src/**/*.{js,mjs,cjs,ts}"] },
  { languageOptions: { globals: globals.browser } },
  pluginJs.configs.recommended,
  ...tseslint.configs.recommended,
  {
    rules: {
      semi: ["error", "never"],
      "max-len": "off",
      indent: ["error", 2],
      quotes: ["error", "double", { allowTemplateLiterals: true }],
      "jsx-quotes": [2, "prefer-double"],
      "no-console": "off",
      "no-alert": "error",
      "array-callback-return": "error",
      "no-multi-spaces": "error",
      "no-return-await": "error",
      "no-self-compare": "error",
      "no-unused-expressions": "error",
      "no-unused-vars": "off",
      "@typescript-eslint/no-unused-vars": "warn",
      "@typescript-eslint/no-explicit-any": "off",
      "no-useless-return": "error",
      radix: "error",
      "no-shadow": "off",
      "no-prototype-builtins": "off",
      "no-use-before-define": [
        "off",
      ],
      "no-undef-init": "error",
      "array-bracket-newline": ["warn", "consistent"],
      "brace-style": "off",
      "comma-dangle": ["error", "always-multiline"],
      "comma-spacing": "error",
      "comma-style": "error",
      "func-call-spacing": "error",
      "function-call-argument-newline": ["warn", "consistent"],
      "implicit-arrow-linebreak": "error",
      "key-spacing": "error",
      "keyword-spacing": "error",
      "newline-per-chained-call": ["error", { ignoreChainWithDepth: 3 }],
      "no-trailing-spaces": "error",
      "no-unneeded-ternary": "warn",
      "no-whitespace-before-property": "error",
      "object-curly-spacing": ["error", "always"],
      "operator-assignment": "error",
      "operator-linebreak": ["error", "before"],
      "prefer-object-spread": "error",
      "wrap-regex": "error",
      // 'arrow-body-style': 'warn',
      "arrow-spacing": ["error", { before: true, after: true }],
      "no-duplicate-imports": "error",
      "no-useless-rename": "error",
      "no-useless-constructor": "error",
      "no-var": "error",
      "object-shorthand": "error",
      "prefer-arrow-callback": ["error", { allowNamedFunctions: true }],
      "prefer-const": "error",
      "prefer-rest-params": "error",
      "prefer-spread": "error",
      "global-require": "error",
      "handle-callback-err": "off",
      "no-mixed-requires": "error",
      "no-new-require": "error",
    },
  },
]
